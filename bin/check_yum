#!/bin/bash

readonly __VERSION="1.0.0-20230420"
readonly __NAME="check_yum"

readonly DNF="/usr/bin/dnf"
readonly YUM="/usr/bin/yum"

readonly OK=0
readonly WARNING=1
readonly CRITICAL=2
readonly UNKNOWN=3

readonly SHORT_OPTIONS="c:hwCD:E:VW"
readonly LONG_OPTIONS="config-file=,cacheonly,disable-repo=,enable-repo=,help,version,warn-on-non-security-updates,warn-on-lock"

LOCKED_IS_OK="yes"
WARN_ON_NON_SECURITY_UPDATES="no"

DNF_YUM_ADDITIONAL_OPTIONS=""

function dnf_or_yum() {
    if [ -x "${DNF}" ]; then
        echo "${DNF}"
    elif [ -x "${YUM}" ]; then
        echo "${YUM}"
    fi
    echo ""
}

function version() {
    cat << EoT 
${__NAME} version ${__VERSION}
Copyright (C) 2023 by Andreas Maus <maus@ypbind.de>
This program comes with ABSOLUTELY NO WARRANTY.
    
${__NAME}} is distributed under the Terms of the GNU General
Public License Version 3. (http://www.gnu.org/copyleft/gpl.html)
EoT
}

function usage() {
    version
    cat << EoT

Usage: ${__NAME} [-C|--cacheonly] [-D <repo>,<repo>,...|--disable-repo=<repo>,<repo>,...] [-E <repo>,<repo>,...|--enable-repo=<repo>,<repo>,...]
    [-V|--version] [-W|--warn-on-lock] [-c <cfg>|--config-file=<cfg>] [-h|--help] [-w|--warn-on-non-security-updates]

    -C                                  Used cached information, don't update DNF/YUM cache
    --cacheonly

    -D <repo>,<repo>,...                Comma separated list of repos to disable
    --disable-repo=<repo>,<repo>,...

    -E <repo>,<repo>,...                Comma separated list of repos to enable
    --enable-repo=<repo>,<repo>,...

    -V                                  Show version information
    --version

    -W                                  Warn if database is locked (another dnf/yum process is running)
    --warn-on-lock                      Default: no, return OK status

    -c <cfg>                            Use non-default configuration file for DNF/YUM
    --config-file=<cfg>                 Default: /etc/dnf/dnf.conf (DNF) or /etc/yum.conf (YUM)

    -h                                  Show this help text
    --help

    -w                                  Report warning state if (only) non-security updates are found
    --warn-on-non-security-updates      Default: Report OK

EoT
}

function clean_on_exit() {
    test -n "${STDERR}" && /bin/rm -f "${STDERR}"
    test -n "${STDOUT}" && /bin/rm -f "${STDOUT}"
}

function check_for_updates() {
    STDERR="$(mktemp)"
    readonly STDERR
    STDOUT="$(mktemp)"
    readonly STDOUT

    # shellcheck disable=SC2086
    "${CMD}" --security --color=never ${DNF_YUM_ADDITIONAL_OPTIONS} check-update 2>"${STDERR}" >"${STDOUT}"
    rc=$?
    if [ ${rc} -ne 0 ]  && [ ${rc} -ne 100 ]; then
        if [ ${rc} -eq 200 ]; then
            echo "Another instance of $(basename "$0") is already running"
            if [ "${LOCKED_IS_OK}" = "yes" ]; then
                clean_on_exit
                exit ${OK}
            else
                clean_on_exit
                exit ${WARNING}
            fi
        fi

        echo "${CMD} --security --color=never ${DNF_YUM_ADDITIONAL_OPTIONS} check-update failed: $(xargs < "${STDERR}")"
        clean_on_exit
        exit ${UNKNOWN}
    fi

    summary="no"
    security=0
    non_security=0
    reboot_required=0

    # Check for summary line
    #
    # Note:
    #  - DNF on RHEL9 prints the summary to stderr
    #  - DNF on RHEL8 prints no summary at all but prints all packages to stdout
    #  - YUM on RHEL7 prints the summary to stdout
    #
    # For installed kernel updates, not booted yet the output contains:
    #
    # Security: kernel-core-4.18.0-425.19.2.el8_7.x86_64 is an installed security update
    #
    if grep -Eq '^No security updates needed, but ([0-9]+) updates available' "${STDOUT}" "${STDERR}"; then
        non_security=$(sed --regexp-extended --quiet --expression='s/No security updates needed, but ([0-9]+) updates available/\1/p' "${STDOUT}" "${STDERR}")
        summary="yes"
    elif grep -Eq '^No packages needed for security; ([0-9]+) packages available' "${STDOUT}" "${STDERR}"; then
        non_security=$(sed --regexp-extended --quiet --expression='s/^No packages needed for security; ([0-9]+) packages available/\1/p' "${STDOUT}" "${STDERR}")
        summary="yes"
    elif grep -Eq '^([0-9]+) package\(s\) needed for security, out of ([0-9]+) available' "${STDOUT}" "${STDERR}"; then
        s_and_ns=$(sed --regexp-extended --quiet --expression='s/^([0-9]+) package\(s\) needed for security, out of ([0-9]+) available/\1,\2/p' "${STDOUT}" "${STDERR}")
        security=$(echo "${s_and_ns}" | cut -d ',' -f 1)
        non_security=$(echo "${s_and_ns}" | cut -d ',' -f 2)
        summary="yes"
    elif grep -Eq '^Security: kernel-.* is an installed security update' "${STDOUT}" "${STDERR}"; then
        reboot_required=1
    fi

    if [ "${summary}" != "yes" ]; then
        # Output format looks like:
        #
        # Updating Subscription Management repositories.
        # Last metadata expiration check: 3:27:18 ago on Wed 19 Apr 2023 03:09:16 PM CEST.
        # curl.x86_64   7.61.1-25.el8_7.3   BaseOS
        # [...]
        # Obsoleting Packages
        # grub2-tools.x86_64        1:2.02-142.el8_7.3.rocky.0.2    BaseOS
        #     grub2-tools.x86_64    1:2.02-142.el8_7.1.rocky.0.2    @BaseOS
        # [...]
        #
        security=$(grep -v '^Last metadata expiration check:' "${STDOUT}" | grep -v '^Updating Subscription Management repositories' | grep -v '^Obsoleting Packages' | \
            grep -v '^ ' | grep -v '^$' | cut -d ' ' -f 1 | sort -u | wc -l)

        # Get non-security updates from dnf/yum updateinfo which looks like:
        #
        # Updating Subscription Management repositories.
        # Last metadata expiration check: 1:25:33 ago on Wed 19 Apr 2023 05:35:06 PM CEST.
        # Updates Information Summary: available
        #     1 New Package notice(s)
        #     6 Security notice(s)
        #         5 Important Security notice(s)
        #         1 Moderate Security notice(s)
        #     9 Bugfix notice(s)

        # shellcheck disable=SC2086
        if ! "${CMD}" --color=never ${DNF_YUM_ADDITIONAL_OPTIONS} updateinfo 2>"${STDERR}" >"${STDOUT}"; then
            echo "${CMD} --color=never ${DNF_YUM_ADDITIONAL_OPTIONS} updateinfo failed: $(xargs < "${STDERR}")"
            clean_on_exit
            exit ${UNKNOWN}
        fi

        sec_n=$(sed --regexp-extended --quiet --expression='s/^\s+([0-9]+) Security notice\(s\)/\1/p' "${STDOUT}")
        test -n "${sec_n}" && sec_n=0

        nsec_n=$(sed --regexp-extended --quiet --expression='s/\s+([0-9]+) Bugfix notice\(s\)/\1/p' "${STDOUT}")
        test -n "${nsec_n}" && nsec_n=0

        non_security=$(( nsec_n - sec_n ))
    fi

    clean_on_exit
    echo "${security},${non_security},${reboot_required}"
}

function parse_command_line_options() {
    OPTS=$(getopt -o "${SHORT_OPTIONS}" --long "${LONG_OPTIONS}" -n "$(basename "$0")" -- "$@")
    eval set -- "${OPTS}"
    unset OPTS

    while true; do
        case "$1" in
            '-C'|'--cacheonly')
                DNF_YUM_ADDITIONAL_OPTIONS="${DNF_YUM_ADDITIONAL_OPTIONS} --cacheonly"
                shift
                continue
                ;;
            '-D'|'--disable-repo')
                DNF_YUM_ADDITIONAL_OPTIONS="${DNF_YUM_ADDITIONAL_OPTIONS} --disablerepo=$2"
                shift 2
                continue
                ;;
            '-E'|'--enable-repo')
                DNF_YUM_ADDITIONAL_OPTIONS="${DNF_YUM_ADDITIONAL_OPTIONS} --enablerepo=$2"
                shift 2
                continue
                ;;
            '-V'|'--version')
                version
                exit ${OK}
                ;;
            '-W'|'--warn-on-lock')
                LOCKED_IS_OK="no"
                shift
                continue
                ;;
            '-c'|'--config-file')
                DNF_YUM_ADDITIONAL_OPTIONS="${DNF_YUM_ADDITIONAL_OPTIONS} --config=$2"
                shift 2
                continue
                ;;
            '-h'|'--help')
                usage
                exit ${OK}
                ;;
            '-w'|'--warn-on-non-security-updates')
                WARN_ON_NON_SECURITY_UPDATES="yes"
                shift
                continue
                ;;
            '--')
                shift
                break
                ;;
            *)
                echo "Error: Can't parse command line arguments" >&2
                exit ${UNKNOWN}
                ;;
        esac
    done
}

function main() {
    parse_command_line_options "$@"

    CMD="$(dnf_or_yum)"
    if [ -z "${CMD}" ]; then
        echo "Neither ${DNF} nor ${YUM} where found"
        exit ${UNKNOWN}
    fi

    update_count="$(check_for_updates)"

    security_count="$(echo "${update_count}" | cut -d ',' -f 1)"
    non_security_count="$(echo "${update_count}" | cut -d ',' -f 2)"
    needs_reboot="$(echo "${update_count}" | cut -d ',' -f 3)"

    if [ "${needs_reboot}" -gt 0 ]; then
        echo "Installed kernel security updates needs reboot"
        exit ${CRITICAL}
    fi

    echo "${security_count} security updates available, ${non_security_count} non-security updates available"
    if [ "${security_count}" -gt 0 ]; then
        exit ${CRITICAL}
    fi

    if [ "${non_security_count}" -gt 0 ]; then
        if [ "${WARN_ON_NON_SECURITY_UPDATES}" = "yes" ]; then
            exit ${WARNING}
        fi
        exit ${OK}
    fi

    exit ${OK}
}

main "$@"
